/**
 * 创建型模式:
 * 创建型模式主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。
 * 这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。
 * 就像我们去商场购买商品时，不需要知道商品是怎么生产出来一样，因为它们由专门的厂商生产。
 *
 * 创建型模式分为以下几种。
 *    单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。
 *    原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。
 *    工厂方法（FactoryMethod）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。
 *    抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。
 *    建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。
 *
 * 以上 5 种创建型模式，除了工厂方法模式属于类创建型模式，其他的全部属于对象创建型模式，我们将在之后的教程中详细地介绍它们的特点、结构与应用。
 *
 * 实验原理
 *   1. 创建型模式的工作原理
 *     创建型模式隐藏了对象的创建细节，对象的创建由相关的工厂来完成，使用者不需要关注对象的创建细节，这样可以降低系统的耦合度。
 *     创建型模式共 5 种，它们分别是单例模式、原型模式、工厂方法模式、抽象工厂模式和建造者模式，其工作原理在各自的教程中也都有详细的介绍，下面以工厂方法模式为例，介绍其实验过程。
 *   2. 工厂方法模式的工作原理
 *     工厂方法模式（Factory Method Pattern），也叫虚拟构造器（Virtual Constructor）模式或者多态工厂（Polymorphic Factory）模式。
 *     在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成。
 *   其结构图如图 factoryMethod.jpg 所示。
 *
 *   工厂方法模式包含如下角色。
 *     抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品。
 *     具体工厂（Concrete Factory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。
 *     抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。
 *     具体产品（Concrete Product）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一 一对应。
 *
 *   工厂方法模式的特点是当系统扩展需要添加新的产品对象时，仅仅需要添加一个具体产品对象以及一个具体工厂对象，原有工厂对象不需要进行任何修改，也不需要修改客户端，很好地符合了“开闭原则”。
 *
 * 实验内容:
 *   用工厂方法模式设计一个电动自行车工厂的模拟程序。{@link org.wmc.create.factory.factoryMethod.bicycle.BicycleFactoryMain}
 */
package org.wmc.create;