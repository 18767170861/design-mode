/**
 * 用迭代器模式编写一个浏览婺源旅游风景图的程序:
 *   分析：婺源的名胜古迹较多，要设计一个查看相关景点图片和简介的程序，用“迭代器模式”设计比较合适。
 *
 *   首先，设计一个婺源景点（WyViewSpot）类来保存每张图片的名称与简介；再设计一个景点集（ViewSpotSet）接口，它是抽象聚合类，提供了增加和删除婺源景点的方法，以及获取迭代器的方法。
 *
 *   然后，定义一个婺源景点集（WyViewSpotSet）类，它是具体聚合类，用 ArrayList 来保存所有景点信息，并实现父类中的抽象方法；
 *   再定义婺源景点的抽象迭代器（ViewSpotltemtor）接口，其中包含了查看景点信息的相关方法。
 *
 *   最后，定义婺源景点的具体迭代器（WyViewSpotlterator）类，它实现了父类的抽象方法；
 *   客户端程序设计成窗口程序，它初始化婺源景点集（ViewSpotSet）中的数据，并实现 ActionListener 接口，它通过婺源景点迭代器（ViewSpotlterator）来査看婺源景点（WyViewSpot）的信息。
 *   图 picture_structure.jpg 所示是其结构图。
 *
 * 模式的应用场景:
 *   前面介绍了关于迭代器模式的结构与特点，下面介绍其应用场景，迭代器模式通常在以下几种情况使用。
 *   当需要为聚合对象提供多种遍历方式时。
 *   当需要为遍历不同的聚合结构提供一个统一的接口时。
 *   当访问一个聚合对象的内容而无须暴露其内部细节的表示时。
 *
 * 由于聚合与迭代器的关系非常密切，所以大多数语言在实现聚合类时都提供了迭代器类，因此大数情况下使用语言中已有的聚合类的迭代器就已经够了。
 *
 * 模式的扩展:
 *   迭代器模式常常与组合模式结合起来使用，在对组合模式中的容器构件进行访问时，经常将迭代器潜藏在组合模式的容器构成类中。
 *   当然，也可以构造一个外部迭代器来对容器构件进行访问，其结构图如图 iterator_extend.jpg 所示。
 *
 */
package org.wmc.behavior.iterator.picture;