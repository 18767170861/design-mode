/**
 * 用“外观模式”设计一个婺源特产的选购界面:
 *   分析：本实例的外观角色 WySpecialty 是 JPanel 的子类，它拥有 8 个子系统角色 Specialty1~Specialty8，
 *   它们是图标类（ImageIcon）的子类对象，用来保存该婺源特产的图标。
 *
 *   外观类（WySpecialty）用 JTree 组件来管理婺源特产的名称，并定义一个事件处理方法 valueClianged(TreeSelectionEvent e)，当用户从树中选择特产时，该特产的图标对象保存在标签（JLabd）对象中。
 *
 *   客户窗体对象用分割面板来实现，左边放外观角色的目录树，右边放显示所选特产图像的标签。其结构图如图 specialty_structure.jpg 所示。
 *
 * 外观模式的应用场景
 *   通常在以下情况下可以考虑使用外观模式。
 *     对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系。
 *     当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。
 *     当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性。
 * 外观模式的扩展
 *   在外观模式中，当增加或移除子系统时需要修改外观类，这违背了“开闭原则”。如果引入抽象外观类，则在一定程度上解决了该问题，其结构图如图 facade_extend.jpg 所示。
 *
 */
package org.wmc.structure.facade.specialty;